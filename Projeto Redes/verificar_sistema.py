"""
Script de verifica√ß√£o do sistema - Verifica se tudo est√° configurado para executar o jogo
√ötil para novos usu√°rios ou para diagn√≥stico de problemas
"""

import os
import sys
import subprocess
import importlib.util
from pathlib import Path


def emoji_status(condicao):
    """Retorna emoji baseado na condi√ß√£o"""
    return "‚úÖ" if condicao else "‚ùå"


def verificar_python():
    """Verifica vers√£o do Python"""
    versao = sys.version_info
    versao_ok = versao.major >= 3 and versao.minor >= 7
    
    print(f"{emoji_status(versao_ok)} Python {versao.major}.{versao.minor}.{versao.micro}")
    if not versao_ok:
        print("   ‚ö†Ô∏è  Recomendado: Python 3.7+")
    
    return versao_ok


def verificar_pygame():
    """Verifica se pygame est√° dispon√≠vel"""
    try:
        import pygame
        versao = pygame.version.ver
        print(f"‚úÖ Pygame {versao}")
        return True
    except ImportError:
        print("‚ùå Pygame n√£o instalado")
        print("   üí° Execute: pip install pygame")
        return False


def verificar_arquivos():
    """Verifica se todos os arquivos est√£o presentes"""
    arquivos_core = [
        'servidor_avancado.py',
        'cliente_avancado.py', 
        'protocolo.py',
        'jogo.py',
        'tabuleiro.py',
        'peca.py',
        'constantes.py',
        'quadrado.py',
        'utilitarios.py',
        'graficos.py',
        'main.py'
    ]
    
    arquivos_auxiliares = [
        'iniciar_jogo.py',
        'config_rede.py',
        'teste_demo.py',
        'verificar_sistema.py',
        'INICIAR_JOGO.bat',
        'GUIA_RAPIDO.md',
        'README.md'
    ]
    
    pasta_recursos = Path('resources')
    recursos = [
        'tabuleiro.png',
        'peca_verde.png',
        'peca_amarela.png',
        'peca_verde_dama.png',
        'peca_amarela_dama.png'
    ]
    
    print("\nüìÅ ARQUIVOS DO PROJETO:")
    
    # Arquivos principais
    print("   Core:")
    todos_core = True
    for arquivo in arquivos_core:
        existe = Path(arquivo).exists()
        print(f"   {emoji_status(existe)} {arquivo}")
        todos_core = todos_core and existe
    
    # Arquivos auxiliares
    print("   Auxiliares:")
    todos_auxiliares = True
    for arquivo in arquivos_auxiliares:
        existe = Path(arquivo).exists()
        print(f"   {emoji_status(existe)} {arquivo}")
        todos_auxiliares = todos_auxiliares and existe
    
    # Recursos
    print("   Recursos:")
    todos_recursos = True
    for recurso in recursos:
        caminho = pasta_recursos / recurso
        existe = caminho.exists()
        print(f"   {emoji_status(existe)} resources/{recurso}")
        todos_recursos = todos_recursos and existe
    
    return todos_core and todos_auxiliares and todos_recursos


def verificar_sintaxe():
    """Verifica sintaxe dos arquivos Python principais"""
    arquivos_verificar = [
        'servidor_avancado.py',
        'cliente_avancado.py',
        'protocolo.py',
        'iniciar_jogo.py',
        'config_rede.py'
    ]
    
    print("\nüîç VERIFICA√á√ÉO DE SINTAXE:")
    
    todos_ok = True
    for arquivo in arquivos_verificar:
        if not Path(arquivo).exists():
            print(f"‚ùå {arquivo} (n√£o encontrado)")
            todos_ok = False
            continue
            
        try:
            # Compila o arquivo para verificar sintaxe
            with open(arquivo, 'r', encoding='utf-8') as f:
                compile(f.read(), arquivo, 'exec')
            print(f"‚úÖ {arquivo}")
        except SyntaxError as e:
            print(f"‚ùå {arquivo} (erro de sintaxe: linha {e.lineno})")
            todos_ok = False
        except Exception as e:
            print(f"‚ö†Ô∏è  {arquivo} (erro: {e})")
            todos_ok = False
    
    return todos_ok


def verificar_importacoes():
    """Verifica se os m√≥dulos podem ser importados"""
    modulos = {
        'servidor_avancado': 'Servidor principal',
        'cliente_avancado': 'Cliente gr√°fico', 
        'protocolo': 'Protocolo de comunica√ß√£o',
        'iniciar_jogo': 'Inicializador autom√°tico',
        'config_rede': 'Configurador de rede'
    }
    
    print("\nüì¶ VERIFICA√á√ÉO DE IMPORTA√á√ïES:")
    
    todos_ok = True
    for modulo, descricao in modulos.items():
        try:
            # Verifica se o arquivo existe
            arquivo = f"{modulo}.py"
            if not Path(arquivo).exists():
                print(f"‚ùå {descricao} (arquivo n√£o encontrado)")
                todos_ok = False
                continue
            
            # Tenta compilar (n√£o importar para evitar efeitos colaterais)
            spec = importlib.util.spec_from_file_location(modulo, arquivo)
            if spec is None:
                print(f"‚ùå {descricao} (n√£o pode criar spec)")
                todos_ok = False
                continue
                
            print(f"‚úÖ {descricao}")
            
        except Exception as e:
            print(f"‚ùå {descricao} (erro: {e})")
            todos_ok = False
    
    return todos_ok


def executar_teste_rapido():
    """Executa um teste r√°pido do inicializador"""
    print("\nüß™ TESTE R√ÅPIDO:")
    
    try:
        # Testa se o inicializador pode ser executado
        resultado = subprocess.run(
            [sys.executable, 'iniciar_jogo.py', '--help'],
            capture_output=True,
            text=True,
            timeout=10
        )
        
        # Como o script n√£o tem --help, vai dar erro, mas mostra que executa
        print("‚úÖ Inicializador execut√°vel")
        return True
        
    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è  Inicializador muito lento")
        return False
    except FileNotFoundError:
        print("‚ùå Inicializador n√£o encontrado")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro no teste: {e}")
        return False


def mostrar_resumo(resultados):
    """Mostra resumo final dos testes"""
    print("\n" + "="*50)
    print("üìä RESUMO DA VERIFICA√á√ÉO")
    print("="*50)
    
    total_testes = len(resultados)
    testes_ok = sum(resultados.values())
    
    for teste, resultado in resultados.items():
        status = "‚úÖ PASS" if resultado else "‚ùå FAIL"
        print(f"{status} {teste}")
    
    print("-" * 50)
    print(f"Total: {testes_ok}/{total_testes} testes passaram")
    
    if testes_ok == total_testes:
        print("\nüéâ TUDO PRONTO! O jogo est√° configurado corretamente.")
        print("üí° Execute: INICIAR_JOGO.bat ou python iniciar_jogo.py")
    else:
        print(f"\n‚ö†Ô∏è  {total_testes - testes_ok} problema(s) encontrado(s)")
        print("üí° Corrija os problemas antes de executar o jogo")
    
    return testes_ok == total_testes


def main():
    """Fun√ß√£o principal da verifica√ß√£o"""
    print("üîç VERIFICA√á√ÉO DO SISTEMA - DAMAS ONLINE")
    print("="*42)
    print()
    
    # Executa todas as verifica√ß√µes
    resultados = {
        'Python 3.7+': verificar_python(),
        'Pygame instalado': verificar_pygame(),
        'Arquivos presentes': verificar_arquivos(),
        'Sintaxe correta': verificar_sintaxe(),
        'Importa√ß√µes OK': verificar_importacoes(),
        'Teste r√°pido': executar_teste_rapido()
    }
    
    # Mostra resumo
    sucesso = mostrar_resumo(resultados)
    
    # Instru√ß√µes finais
    if sucesso:
        print("\nüöÄ PR√ìXIMOS PASSOS:")
        print("1. INICIAR_JOGO.bat (Windows) ou python iniciar_jogo.py")
        print("2. Escolha a op√ß√£o desejada no menu")
        print("3. Divirta-se jogando!")
    else:
        print("\nüîß CORRE√á√ïES NECESS√ÅRIAS:")
        print("1. Instale depend√™ncias faltantes")
        print("2. Corrija arquivos com problemas")
        print("3. Execute esta verifica√ß√£o novamente")
    
    print("\nüìã Para ajuda detalhada:")
    print("- README.md (documenta√ß√£o completa)")
    print("- GUIA_RAPIDO.md (instru√ß√µes simplificadas)")
    print("- python config_rede.py (diagn√≥stico de rede)")


if __name__ == "__main__":
    try:
        main()
        input("\nPressione Enter para sair...")
    except KeyboardInterrupt:
        print("\nüëã Verifica√ß√£o interrompida")
    except Exception as e:
        print(f"\n‚ùå Erro durante verifica√ß√£o: {e}")
        input("Pressione Enter para sair...")
